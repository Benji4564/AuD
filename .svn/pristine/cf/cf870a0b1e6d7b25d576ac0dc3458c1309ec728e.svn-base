package de.ostfalia.aud.s23ss.a2;

import de.ostfalia.aud.s23ss.a2.Comparator.DepartmentComparator;
import de.ostfalia.aud.s23ss.a2.Comparator.FirstNameComparator;
import de.ostfalia.aud.s23ss.a2.Comparator.KeyComparator;
import de.ostfalia.aud.s23ss.a2.Comparator.NameComparator;
import de.ostfalia.aud.s23ss.a2.Enums.Sort;
import de.ostfalia.aud.s23ss.a2.WithStringComparator.DepartmentAndStringComparator;
import de.ostfalia.aud.s23ss.a2.WithStringComparator.FirstNameAndStringComparator;
import de.ostfalia.aud.s23ss.a2.WithStringComparator.LastNameAndStringComparator;
import de.ostfalia.aud.s23ss.base.Department;
import de.ostfalia.aud.s23ss.base.Employee;
import de.ostfalia.aud.s23ss.base.IEmployee;
import de.ostfalia.aud.s23ss.base.IManagement;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Comparator;


/**
 * Klasse Management.
 * @author - Ronja Rosenbach und Benjamin Vollmers
 */
public class Management implements IManagement{

    private int numberOfOperations = 0; // Anzahl der ausgeführten Operationen
    IEmployee[] employees = new IEmployee[8]; // Array mit den Datensätzen
    IEmployee[] shorten = null; // temporäres Array
    private int numberNormalOperations = 0; // Anzahl der Grundoperationen
    long timeUsed = 0; // Zeit die für die Operationen benötigt wurde
    int pointer = 0; // Zeiger für das Array
    Sort sortType = Sort.KEY; // Sortierart


    /**
     * Konstruktor für die Klasse Management.
     * @param fileName - Dateiname: String.
     * @throws IOException - Fehler beim Einlesen der Datei.
     */
    public Management(String fileName) throws IOException {
        numberOfOperations = 0;
        numberNormalOperations = 0;
        int counter = 0;
        String[] fileContent = Files.readAllLines(Paths.get(fileName)).toArray(new String[0]);
        for (int i = 1; i < fileContent.length; i++) {
            counter++;
            insert(new Employee(fileContent[i]));
            counter += numberOfOperations;
        }
        numberOfOperations = counter;
    }

    /**
     * Konstruktor für die Klasse Management.
     * @param data - Array mit den Datensätzen: IEmployee[].
     */
    public Management(String[] data){
        int counter = 0;
        for(int i = 0; i < employees.length; i++){
            employees[i] = new Employee(null);
        }

        for(int i = 0; i < data.length; i++){
            insert(new Employee(data[i]));
            counter+= numberOfOperations;
            counter++;
        }
        numberOfOperations = counter;
    }

    /**
     * Konstruktor für die Klasse Management.
     */    
    public Management(){
        numberOfOperations = 0;
        employees = new IEmployee[8];
        for(int i = 0; i < employees.length; i++){
            employees[i] = new Employee(null);
        }  
    }

    
    /**
	 * Liefert die Anzahl der Datensätze.
     * @return Anzahl der Datensätze: int.
	 */
    @Override
    public int size() {
        numberOfOperations = 0;
        return this.toArray().length;
    }
    

    /**
	 * Fügt einen Mitarbeiter hinzu.
	 * @param member - hinzuzufügender Mitarbeiter: IEmployee.	
	 */
    @Override
    public void insert(IEmployee member) { 
        shorten = null; 
        numberOfOperations = 0;  
        numberNormalOperations++; 
        if (member == null) {
            throw new IllegalArgumentException("Member is null");
        } else{
            employees = addDataDynamic(employees, member, pointer);
            pointer++;
            numberOfOperations+=1;
        }   
    }


    /**
     * Sortiert das Array mit dem MergeSort Algorithmus.
     * @param arr - Array mit den Datensätzen: IEmployee[].
     * @param comparator - Vergleichsobjekt: Comparator<IEmployee>.
     */
    public void sort(IEmployee[] arr, Comparator<IEmployee> comparator) {
        if (arr == null || arr.length < 2) {
            return;
        }
        IEmployee[] temp = new IEmployee[arr.length];
        mergeSort(arr, 0, arr.length - 1, temp, comparator);
    }
    

    /**
     * MergeSort Algorithmus.
     * @param arr - Array mit den Datensätzen: IEmployee[].
     * @param left - linke Grenze: int.
     * @param right - rechte Grenze: int.
     * @param temp - temporäres Array: IEmployee[].
     * @param comparator - Vergleichsobjekt: Comparator<IEmployee>.     * 
     */
    private void mergeSort(IEmployee[] arr, int left, int right, IEmployee[] temp, Comparator<IEmployee> comparator) {
        if (left >= right) {
            return;
        }
        int mid = (left + right) / 2;
        mergeSort(arr, left, mid, temp, comparator);
        mergeSort(arr, mid + 1, right, temp, comparator);
        merge(arr, left, mid, right, temp, comparator);
    }
    

    /**
     * Merge Methode für den MergeSort Algorithmus.
     * @param arr - Array mit den Datensätzen: IEmployee[].
     * @param left - linke Grenze: int.
     * @param mid - mittlere Grenze: int.
     * @param right - rechte Grenze: int.
     * @param temp - temporäres Array: IEmployee[].
     * @param comparator - Vergleichsobjekt: Comparator<IEmployee>.     *
     */
    private void merge(IEmployee[] arr, int left, int mid, int right, IEmployee[] temp, Comparator<IEmployee> comparator) {
        int i = left;
        int j = mid + 1;
        int k = left;
        while (i <= mid && j <= right) {
            if (comparator.compare(arr[i], arr[j]) <= 0) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        while (j <= right) {
            temp[k++] = arr[j++];
        }
        System.arraycopy(temp, left, arr, left, right - left + 1);
    }

    
    

    /**
	 * Sucht nach einem Datensatz mit dem angegebenen Schlüssel.
	 * @param key - Schlüsselwert: int 
	 * @return - den gefundenen Datensatz, oder null, wenn der Schlüsselwert
	 * nicht gefunden werden konnte: IEmployee.
	 */
    @Override
    public IEmployee search(int key) {
        numberOfOperations = 0;
        IEmployee[] localEmployees = null;
        Comparator<IEmployee> comparator = new KeyComparator();
        if( shorten == null){
            localEmployees = createArrayWithSort(employees, comparator);
            shorten = localEmployees;
        }
        localEmployees = shorten;

        // if(sortType == Sort.KEY || shorten == null) {
        //     localEmployees = createArrayWithSort(employees, comparator);
        //     shorten = localEmployees;
        // } else{
        //     localEmployees = shorten;
        // }
        //printEmployee(localEmployees);
        // System.err.println("SortType: " + sortType.toString());
        // System.err.println("SortType: " + sortType.toString().equals("KEY"));
        // if ( sortType.toString().equals("KEY")) {
        //     localEmployees = sortByComparator(localEmployees, new KeyComparator());
        // } 
        //System.err.println(key);
        //printEmployee(localEmployees);
        
        
        int links = 0;
        int rechts = localEmployees.length - 1;
        while(links<=rechts){    
            numberOfOperations++;        
            int mitte = (links + rechts) / 2;
            if (localEmployees[mitte] != null && localEmployees[mitte].getKey() == key) {
                if(numberOfOperations==1) { // Bei direketem Treffer ist die Anzahl der Operationen 1, soll aber 2 sein.
                    numberOfOperations++;
                }
               return localEmployees[mitte];
            } else if (localEmployees[mitte] != null && localEmployees[mitte].getKey() < key) {
                links = mitte + 1;
            } else {
                rechts = mitte - 1;
            }            
        }
        return null;            
    }


    /**
     * Sucht nach einem Datensatz mit dem angegebenen Namen.
     * @param name - Name: String
     * @param firstName - Vorname: String
     * @return - den gefundenen Datensatz, oder null, wenn der Name
     * nicht gefunden werden konnte: IEmployee.
     */
    @Override
    public IEmployee[] search(String name, String firstName) {
        numberOfOperations = 0;
        Comparator<IEmployee> comparator = new NameComparator();
        IEmployee[] arr = createArray(employees);
        // Erstelle ein temporäres Array zur Speicherung der gefundenen Employees
        IEmployee[] found = new IEmployee[arr.length];
        sortByComparator(arr, comparator);
        try {
            Comparator<Object> nameComparator = new LastNameAndStringComparator();
            int[] bounds = findFirstAndLast(arr, name, nameComparator);
            IEmployee[] target = new IEmployee[bounds[1] - bounds[0] + 1];
            System.arraycopy(arr, bounds[0], target, 0, bounds[1] - bounds[0] + 1);
            Comparator<IEmployee> firstNameComparator = new FirstNameComparator();
            numberOfOperations /= 1.5;
            target = sortByComparator(target, firstNameComparator);
            nameComparator = new FirstNameAndStringComparator();
            bounds = findFirstAndLast(target, firstName, nameComparator);
            found = new IEmployee[bounds[1] - bounds[0] + 1];
            
            System.arraycopy( target, bounds[0], found, 0, bounds[1] - bounds[0] + 1);

    
            return createArray(found);
        } catch (Exception e) {
            return new IEmployee[0];
        }
    }
    

   /**
	 * Liefert die Anzahl der Mitarbeiter der angegebenen Abteilung zurück.
	 * @param department die gesuchte Abteilung: Department.
	 * @return - Anzahl der Datensätze mit der angegebenen Abteilung: int.
	 */
    @Override
    public int size(Department department) {
        numberOfOperations = 0;

        IEmployee[] arr = this.toArray();
        // Erstelle ein temporäres Array zur Speicherung der gefundenen Employees
        int eCounter = 0;
        for(IEmployee e : arr){
            employees[eCounter] = e;
            eCounter++;
        }
 
        Comparator<IEmployee> comparator = new DepartmentComparator();
        Comparator<Object> departmentComparator = new DepartmentAndStringComparator();
        int[] bounds = findFirstAndLast(sortByComparator(createArray(employees), comparator), department.toString(), departmentComparator);

        int range = bounds[1] - bounds[0];
        return bounds[0] == -1 && bounds[1] == -1 ? 0 : range + 1;         
    }

    
    /**
     * Methode zum Sortieren eines Arrays anhand eines Comparators.
     * @param localEmployees Array, das sortiert werden soll.
     * @param comparator Comparator, der die Sortierung vorgibt.
     * @return sortiertes Array.
     */
    private IEmployee[] sortByComparator(IEmployee[] localEmployees, Comparator<IEmployee> comparator) {
        ComparatorInterface comparatorInterface = (ComparatorInterface) comparator; 
        sortType = comparatorInterface.getSortType();
        sort(localEmployees, comparator);
        int eCounter = 0;
        for(IEmployee e : localEmployees){
            localEmployees[eCounter] = e;
            eCounter++;
        }

        return localEmployees;
    }
    

    /**
	 * Liefert die Datensaetze mit der angegebenen Abteilung zurück.
	 * @param department die gesuchte Abteilung: Department.
	 * @return - die Datensätze mit der der angegebenen Abteilung,
	 * oder ein leeres Array, wenn keine Einträge gefunden wurden: IEmployee[].
	 */
    @Override
    public IEmployee[] members(Department department) {
        timeUsed = 0;
        numberOfOperations = 0;
        Comparator<IEmployee> comparator = new DepartmentComparator();
        IEmployee[] temp = sortByComparator(this.toArray(), comparator);
        Comparator<Object> comparator2 = new DepartmentAndStringComparator();
        int[] bounds = findFirstAndLast(temp, department.toString(), comparator2);
        
        //System.out.println("Bounds: " + bounds[0] + " " + bounds[1]);
        
        IEmployee[] target = new IEmployee[bounds[1] - bounds[0] + 1];
        int c = 0;
        for (int i = bounds[0]; i <= bounds[1]; i++) {
            if(i == -1){
                return new IEmployee[0];
            }
            target[c] = temp[i];
            c++;
        }
        return target;
    }


    /**
     * Methode zum Finden der ersten und letzten Position eines Elements in einem Array.
     * @param arr das Array: IEmployee[].
     * @param department die gesuchte Abteilung: Department.
     * @return - die erste und letzte Position des Elements im Array: int[].     * 
     */
    public int[] bounds(IEmployee[] arr, Department department) {
        int lower = -1, upper = -1;
        
        // Find lower bound
        int lo = 0, hi = arr.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (arr[mid].getDepartment().equals(department)) {
                lower = mid;
                hi = mid - 1;
            } else if (department.compareTo(arr[mid].getDepartment()) < 0) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
    
        // Find upper bound
        lo = 0;
        hi = arr.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (arr[mid].getDepartment().equals(department)) {
                upper = mid;
                lo = mid + 1;
            } else if (department.compareTo(arr[mid].getDepartment()) < 0) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        
        return new int[] {lower, upper};
    }


    /**
	 * Liefert die Zeit die für die Operationen benötigt wurde.
	 * @return timeUsed- Zeit.
	 */
    public long getTimeUsed() {
        return timeUsed;
    }


    /**
	 * Liefert alle Datensätze als Array von IEmployee zurück.
	 * @return newEmployees- alle Datensätze als Array: IEmployee[].
	 */
    @Override
    public IEmployee[] toArray() {
        int c = 0;
        for(IEmployee e : employees) {
            if( e!=null && !e.toString().equals("KeinEintrag")){
                c++;
            }
        }
        IEmployee[] newEmployees = new IEmployee[c];
        for(int i = 0; i < c; i++) {
            newEmployees[i] = employees[i];
        }
        IEmployee[] sortedEmployees = sortByComparator(newEmployees, new KeyComparator());
        return sortedEmployees;
    }


        /**
	 * Liefert alle Datensätze als Array von IEmployee zurück.
     * @param locaEmployees - Array von IEmployee
	 * @return - alle Datensätze als Array: IEmployee[].
	 */
    private IEmployee[] createArray(IEmployee[] locaEmployees) {
        int c = 0;
        for(IEmployee e : locaEmployees) {
            if(e!= null && !e.toString().equals("KeinEintrag")){
                c++;
            }
        }
        IEmployee[] newEmployees = new IEmployee[c];
        for(int i = 0; i < c; i++) {
            newEmployees[i] = locaEmployees[i];
        }
        return newEmployees;
    }


    /**
     * Liefert alle Datensätze als Array von IEmployee zurück.
     * @param locaEmployees - Array von IEmployee
     * @param comparator - Comparator
     * @return - alle Datensätze als Array: IEmployee[] sortiert.
     */

    private IEmployee[] createArrayWithSort(IEmployee[] locaEmployees, Comparator<IEmployee> comparator) {
        int c = 0;
        for(IEmployee e : locaEmployees) {
            if(e!= null && !e.toString().equals("KeinEintrag")){
                c++;
            }
        }
        IEmployee[] newEmployees = new IEmployee[c];
        for(int i = 0; i < c; i++) {
            newEmployees[i] = locaEmployees[i];
        }
        return sortByComparator(newEmployees, comparator);
    }


    /**
	 * Liefert alle Datensätze als Array von IEmployee zurück.
	 * @return newEmployees- alle Datensätze als Array: IEmployee[].
     * @param comparator - Comparator
	 */
    public IEmployee[] toArray(Comparator<IEmployee> comparator) {
        int c = 0;
        for(IEmployee e : employees) {
            if( e!=null && !e.toString().equals("KeinEintrag")){
                c++;
            }
        }
        IEmployee[] newEmployees = new IEmployee[c];
        for(int i = 0; i < c; i++) {
            newEmployees[i] = employees[i];
        }
        return sortByComparator(newEmployees, new KeyComparator());
    }





    /**
	 * Liefert die Anzahl grundlegenden Operationen bei der zuvor aufgerufenen
	 * Zugriffsmethode zurück.
	 * @return numberOfOperations - Anzahl grundlegenden Operationen bei der zuvor aufgerufenen
	 * Zugriffsmethode: int.
	 */
    @Override
    public int numberOfOperations() {
        return numberOfOperations;
    }


    /**
	 * Liefert die Anzahl Operationen bei der zuvor aufgerufenen
	 * Zugriffsmethode zurück.
	 * @return - Anzahl Operationen bei der zuvor aufgerufenen
	 * Zugriffsmethode: int.
	 */
    public int getNumberOfNormalOperations() {
        return numberNormalOperations;
    }


    /**
     * Liefert die Anzahl der Operationen bei der zuvor aufgerufenen
     * Zugriffsmethode zurück.
     * @return data- Anzahl Operationen bei der zuvor aufgerufenen
     */
    private IEmployee[] addDataDynamic(IEmployee[] data, IEmployee newEmployee, int index){
        numberNormalOperations++;
        if(index == data.length) {
            IEmployee[] temp = data.clone();
            data = new IEmployee[temp.length * 2];
            for(int i = 0; i < temp.length; i++){                
                data[i] = temp[i];
            }
        }

        for(int i = 0; i < data.length; i++) {
            numberNormalOperations++;           
        }
        data[index] = newEmployee;
        return data;        
    }

    /**
     * Methode gibt alle Datensätze aus.
     * @param localEmployees - Array von IEmployee 
     */
    public void printEmployee(IEmployee[] localEmployees) {
        for (IEmployee e : localEmployees) {
            System.out.println(e);
        }
    }
    
        /**
     * Methode zum Suchen des ersten und letzten Vorkommens eines Namens in einem Array.
     * @param localEmployees Array, in dem gesucht werden soll.
     * @param name Name, nach dem gesucht werden soll.
     * @param c Comparator
     * @return Array mit dem Index des ersten und letzten Vorkommens des Namens im Array.
     */
    public int[] findFirstAndLast(IEmployee[] localEmployees, String name, Comparator<Object> c) {
        int firstIndex = binarySearchFirst(localEmployees, name, c);
        int lastIndex = binarySearchLastIndex(localEmployees, name, c);
        return new int[] {firstIndex, lastIndex};
    }
    

    /**
     * Methode zum Suchen des ersten Vorkommens eines Namens in einem Array.
     * @param localEmployees Array, in dem gesucht werden soll.
     * @param querry Name, nach dem gesucht werden soll.
     * @return Index des ersten Vorkommens des Namens im Array.
     */
    private int binarySearchFirst(IEmployee[] localEmployees, String querry, Comparator<Object> c) {
        int left = 0;
        int right = localEmployees.length - 1;
        int index = -1;
    
        while (left <= right) {
            numberOfOperations+=1;
            int mid = left + (right - left) / 2;
            int compare = c.compare(localEmployees[mid], querry);
            if ((mid == 0 || c.compare(localEmployees[mid - 1], querry) != 0) && compare == 0) {

                index = mid;
                
                right = mid - 1;
                return index;
            } else if (compare < 0) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }    
        return index;
    }
    
    /**
     * Methode zum Suchen des letzten Vorkommens einer Abteilung in einem Array.
     * @param localEmployees Array in dem gesucht werden soll.
     * @param querry Abteilung nach der gesucht werden soll.
     * @return Index des letzten Vorkommens der Abteilung.
     */
    private int binarySearchLastIndex(IEmployee[] localEmployees, String querry, Comparator<Object> c) {
        int left = 0;
        int right = localEmployees.length - 1;
        int index = -1;
    
        while (left <= right) {
            numberOfOperations+=1; 
            int mid = left + (right - left) / 2;
            int compare = c.compare(localEmployees[mid], querry);
            if ( compare == 0 ) { //localEmployees[mid].getDepartment().toString().equals(department.toString())
                index = mid;
                left = mid + 1;
            } else if (compare < 0) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }    
        return index;
    }

    public static void main(String[] args) throws InterruptedException {
        String fileName = "AlgoDatSS23/Materialien/40k_employees.csv";
        try {
            Management management = new Management(fileName);
            management.search(30000);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}